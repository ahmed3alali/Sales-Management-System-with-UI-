/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.mycompany.secondsemesterproject;


import java.awt.Color;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author User
 */
public class Store extends javax.swing.JFrame {

 

    DefaultTableModel myTable = new DefaultTableModel();

    String cols[] = {"Code", "ProductName", "Supplier", "Category", "Price Bought", "Price Sold", "Location", "Quantity Avaliable"};

    String productName;
    String supplier;
    int price;
    int price2;


    
    
    


    public void PopulateWithDatabase() {
        String sql = "SELECT * FROM ITEMSINSYSTEM";
        try ( PreparedStatement p = conn.prepareStatement(sql)) {

            ResultSet resultSet = p.executeQuery();
            while (resultSet.next()) {
                String productName = resultSet.getString("ITEMNAME");
                ProductsInSstm.addItem(productName);

            }
        } catch (SQLException ex) {
            Logger.getLogger(Store.class.getName()).log(Level.SEVERE, null, ex);
        }

    }


    public void populateTable() {

        // Add more columns as needed
        try {
            String query = "SELECT itemcode, itemname, buyingprice, sellingprice,supplier,category, location, QUANTITYAVALIABLE  FROM ITEMSINSTOCK";
            PreparedStatement statement = conn.prepareStatement(query);
            ResultSet resultSet = statement.executeQuery();

            while (resultSet.next()) {
                String barcode = resultSet.getString("itemcode");
                String property1 = resultSet.getString("itemname");
                int property2 = resultSet.getInt("buyingprice");
                int property3 = resultSet.getInt("sellingprice");

                String Thesupplier = resultSet.getString("supplier");
                String category = resultSet.getString("category");
                String location = resultSet.getString("location");
                int quantity = resultSet.getInt("QUANTITYAVALIABLE");
                myTable.addRow(new Object[]{barcode, property1, Thesupplier, category, property2, property3, location, quantity});
            }

            System.out.println("Table populated successfully.");
        } catch (SQLException ex) {
            System.out.println("Error populating table: " + ex.getMessage());
        }

    }

    /**
     * Creates new form System1
     */
    Connection conn;

    public Store() {
        initComponents();
         GoToItemsBtn.setForeground(Color.WHITE);
        
        GoToRequest.setForeground(Color.WHITE);
        GoToNewOrder.setForeground(Color.WHITE);
       
        
        LocationError.setVisible(false);
        QuantityError.setVisible(false);
        
        this.setLocationRelativeTo(null);
        
        
        
        try {
            conn = DriverManager.getConnection("jdbc:derby://localhost:1527/SecondSemesterProject", "app", "app");
        } catch (SQLException ex) {
            Logger.getLogger(Store.class.getName()).log(Level.SEVERE, null, ex);
        }

        jTable1.setModel(myTable);
        myTable.setColumnIdentifiers(cols);

         PopulateWithDatabase();
         populateTable();
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel2 = new javax.swing.JPanel();
        jPanel4 = new javax.swing.JPanel();
        jLabel8 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        GoToItemsBtn = new javax.swing.JLabel();
        GoToRequest = new javax.swing.JLabel();
        GoToNewOrder = new javax.swing.JLabel();
        jLabel20 = new javax.swing.JLabel();
        jLabel25 = new javax.swing.JLabel();
        jLabel29 = new javax.swing.JLabel();
        QuantityFLD = new javax.swing.JTextField();
        DeleteBtn = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        ProductsInSstm = new javax.swing.JComboBox<>();
        jLabel1 = new javax.swing.JLabel();
        BuyingPricePopulate = new javax.swing.JLabel();
        AddTOSTOCK = new javax.swing.JButton();
        CategoryPopulate = new javax.swing.JLabel();
        SupplierPopulate = new javax.swing.JLabel();
        LocationFLD = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        sellingpricePopulate = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        ItemCodes = new javax.swing.JLabel();
        QuantityError = new javax.swing.JLabel();
        LocationError = new javax.swing.JLabel();
        jLabel16 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setResizable(false);

        jPanel2.setBackground(new java.awt.Color(255, 255, 255));
        jPanel2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        jPanel4.setBackground(new java.awt.Color(71, 6, 56));

        jLabel2.setBackground(new java.awt.Color(255, 255, 255));
        jLabel2.setFont(new java.awt.Font("Leelawadee UI Semilight", 0, 24)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setText("Stock  Management ");

        jLabel3.setIcon(new javax.swing.ImageIcon("C:\\Users\\User\\Desktop\\CP2\\Samm.png")); // NOI18N
        jLabel3.setText("jLabel1");

        GoToItemsBtn.setBackground(new java.awt.Color(255, 255, 255));
        GoToItemsBtn.setFont(new java.awt.Font("Gill Sans MT", 0, 24)); // NOI18N
        GoToItemsBtn.setText("Items");
        GoToItemsBtn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                GoToItemsBtnMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                GoToItemsBtnMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                GoToItemsBtnMouseExited(evt);
            }
        });

        GoToRequest.setBackground(new java.awt.Color(255, 255, 255));
        GoToRequest.setFont(new java.awt.Font("Gill Sans MT", 0, 24)); // NOI18N
        GoToRequest.setText("Request");
        GoToRequest.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                GoToRequestMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                GoToRequestMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                GoToRequestMouseExited(evt);
            }
        });

        GoToNewOrder.setBackground(new java.awt.Color(255, 255, 255));
        GoToNewOrder.setFont(new java.awt.Font("Gill Sans MT", 0, 24)); // NOI18N
        GoToNewOrder.setText("Orders");
        GoToNewOrder.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                GoToNewOrderMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                GoToNewOrderMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                GoToNewOrderMouseExited(evt);
            }
        });

        jLabel20.setIcon(new javax.swing.ImageIcon("C:/Users/User/Desktop/CP2/icons8-request-30.png")); // NOI18N
        jLabel20.setText("jLabel20");

        jLabel25.setIcon(new javax.swing.ImageIcon("C:/Users/User/Desktop/CP2/icons8-open-box-40.png")); // NOI18N
        jLabel25.setText("jLabel20");

        jLabel29.setIcon(new javax.swing.ImageIcon("C:/Users/User/Desktop/CP2/icons8-create-order-30.png")); // NOI18N
        jLabel29.setText("jLabel20");

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGap(382, 382, 382)
                .addComponent(jLabel8)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addContainerGap(501, Short.MAX_VALUE)
                        .addComponent(jLabel2)
                        .addGap(457, 457, 457))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGap(184, 184, 184)
                        .addComponent(jLabel25, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(GoToItemsBtn)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel20, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(GoToRequest)
                        .addGap(196, 196, 196)
                        .addComponent(jLabel29, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(GoToNewOrder)
                        .addGap(148, 148, 148)))
                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(46, 46, 46))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addComponent(jLabel8)
                .addGap(18, 18, 18)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGap(0, 5, Short.MAX_VALUE)
                        .addComponent(jLabel2)
                        .addGap(18, 18, 18)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(GoToRequest)
                            .addComponent(jLabel20)
                            .addComponent(GoToNewOrder)
                            .addComponent(GoToItemsBtn)
                            .addComponent(jLabel25)
                            .addComponent(jLabel29))
                        .addGap(17, 17, 17))))
        );

        QuantityFLD.setBackground(new java.awt.Color(255, 255, 255));
        QuantityFLD.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(71, 6, 56), 3, true));

        DeleteBtn.setText("Delete");
        DeleteBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DeleteBtnActionPerformed(evt);
            }
        });

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4", "Title 5"
            }
        ));
        jScrollPane1.setViewportView(jTable1);

        ProductsInSstm.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                ProductsInSstmItemStateChanged(evt);
            }
        });
        ProductsInSstm.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ProductsInSstmActionPerformed(evt);
            }
        });

        jLabel1.setBackground(new java.awt.Color(71, 6, 56));
        jLabel1.setFont(new java.awt.Font("Leelawadee UI Semilight", 0, 18)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(71, 6, 56));
        jLabel1.setText("Buying Price/ TL :");

        BuyingPricePopulate.setFont(new java.awt.Font("Leelawadee UI Semilight", 0, 18)); // NOI18N
        BuyingPricePopulate.setForeground(new java.awt.Color(0, 0, 0));
        BuyingPricePopulate.setText("NoItemSelected");

        AddTOSTOCK.setText("Add to My Avaliable Stock");
        AddTOSTOCK.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AddTOSTOCKActionPerformed(evt);
            }
        });

        CategoryPopulate.setBackground(new java.awt.Color(0, 0, 0));
        CategoryPopulate.setFont(new java.awt.Font("Leelawadee UI Semilight", 0, 18)); // NOI18N
        CategoryPopulate.setForeground(new java.awt.Color(0, 0, 0));
        CategoryPopulate.setText("NoItemSelected");

        SupplierPopulate.setBackground(new java.awt.Color(0, 0, 0));
        SupplierPopulate.setFont(new java.awt.Font("Leelawadee UI Semilight", 0, 18)); // NOI18N
        SupplierPopulate.setForeground(new java.awt.Color(0, 0, 0));
        SupplierPopulate.setText("NoItemSelected");

        LocationFLD.setBackground(new java.awt.Color(255, 255, 255));
        LocationFLD.setForeground(new java.awt.Color(71, 6, 56));
        LocationFLD.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(71, 6, 56), 3, true));

        jLabel7.setFont(new java.awt.Font("Leelawadee UI Semilight", 0, 18)); // NOI18N
        jLabel7.setForeground(new java.awt.Color(71, 6, 56));
        jLabel7.setText("Category");

        jLabel12.setBackground(new java.awt.Color(121, 158, 81));
        jLabel12.setFont(new java.awt.Font("Leelawadee UI Semilight", 0, 18)); // NOI18N
        jLabel12.setForeground(new java.awt.Color(71, 6, 56));
        jLabel12.setText("Product ");

        jLabel13.setFont(new java.awt.Font("Leelawadee UI Semilight", 0, 18)); // NOI18N
        jLabel13.setForeground(new java.awt.Color(71, 6, 56));
        jLabel13.setText("Supplier");

        jLabel14.setFont(new java.awt.Font("Leelawadee UI Semilight", 0, 18)); // NOI18N
        jLabel14.setForeground(new java.awt.Color(71, 6, 56));
        jLabel14.setText("Enter Quantity");

        jLabel15.setFont(new java.awt.Font("Leelawadee UI Semilight", 0, 18)); // NOI18N
        jLabel15.setForeground(new java.awt.Color(71, 6, 56));
        jLabel15.setText("Enter Stock Location");

        sellingpricePopulate.setFont(new java.awt.Font("Dialog", 0, 24)); // NOI18N
        sellingpricePopulate.setText("jLabel4");

        jLabel4.setFont(new java.awt.Font("Leelawadee UI Semilight", 0, 18)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(71, 6, 56));
        jLabel4.setText("Item Code");

        ItemCodes.setFont(new java.awt.Font("Leelawadee UI Semilight", 0, 18)); // NOI18N
        ItemCodes.setForeground(new java.awt.Color(0, 0, 0));
        ItemCodes.setText("0");

        QuantityError.setForeground(new java.awt.Color(204, 0, 0));
        QuantityError.setText("This field cannot be empty ");

        LocationError.setForeground(new java.awt.Color(204, 0, 0));
        LocationError.setText("This field cannot be empty");

        jLabel16.setBackground(new java.awt.Color(121, 158, 81));
        jLabel16.setFont(new java.awt.Font("Leelawadee UI Semilight", 0, 36)); // NOI18N
        jLabel16.setForeground(new java.awt.Color(71, 6, 56));
        jLabel16.setText("My Avaliable Stock List");
        jLabel16.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel16MouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                jLabel16MouseEntered(evt);
            }
        });

        jLabel5.setFont(new java.awt.Font("Leelawadee UI Semilight", 0, 18)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(71, 6, 56));
        jLabel5.setText("Selling Price/ TL :");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                                .addComponent(jLabel12)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(ProductsInSstm, javax.swing.GroupLayout.PREFERRED_SIZE, 218, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(41, 41, 41))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 147, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel13)
                                    .addComponent(jLabel7))
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel2Layout.createSequentialGroup()
                                        .addGap(68, 68, 68)
                                        .addComponent(ItemCodes, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(jPanel2Layout.createSequentialGroup()
                                        .addGap(75, 75, 75)
                                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(SupplierPopulate)
                                            .addComponent(CategoryPopulate, javax.swing.GroupLayout.PREFERRED_SIZE, 131, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(BuyingPricePopulate, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE))))
                                .addGap(127, 127, 127)))
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel14)
                                    .addGroup(jPanel2Layout.createSequentialGroup()
                                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jLabel15)
                                            .addComponent(jLabel5))
                                        .addGap(109, 109, 109)
                                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(QuantityError)
                                            .addComponent(LocationError, javax.swing.GroupLayout.PREFERRED_SIZE, 146, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(sellingpricePopulate, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))))
                                .addGap(63, 63, 63)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(AddTOSTOCK, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(LocationFLD)
                                    .addComponent(QuantityFLD, javax.swing.GroupLayout.Alignment.LEADING)))
                            .addComponent(jLabel16)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(DeleteBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 131, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 996, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(157, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel2Layout.createSequentialGroup()
                                        .addGap(24, 24, 24)
                                        .addComponent(QuantityError))
                                    .addComponent(jLabel14, javax.swing.GroupLayout.Alignment.TRAILING))
                                .addGap(13, 13, 13))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                                .addComponent(QuantityFLD, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)))
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(LocationFLD, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(LocationError)
                                .addComponent(jLabel15)))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(sellingpricePopulate)
                                .addComponent(jLabel5))
                            .addComponent(AddTOSTOCK)))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(ProductsInSstm, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel12))
                        .addGap(19, 19, 19)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel7)
                            .addComponent(CategoryPopulate))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(SupplierPopulate, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel13))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(BuyingPricePopulate))
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(38, 38, 38)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel4)
                            .addComponent(ItemCodes))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 45, Short.MAX_VALUE)
                        .addComponent(jLabel16)
                        .addGap(29, 29, 29)))
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(DeleteBtn)
                .addGap(71, 71, 71))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

   private boolean checkIfThereIsOrder(String productName) {
        boolean hasOrder = false;
        String query = "SELECT * FROM app.ORDERS WHERE ITEMNAME = ?";
        try {
             PreparedStatement statement = conn.prepareStatement(query) ;
            
            statement.setString(1, productName);
            ResultSet resultSet = statement.executeQuery();
       
            if (resultSet.next()) {
                    String thefounded = resultSet.getString("ITEMNAME");
                hasOrder = true;
                System.out.println("found it ! Test Passed");
                
            }
            
        } catch (SQLException ex) {
            ex.printStackTrace();
        }
        
        return hasOrder;
    }
   
   
     private void deleteProductFromStock(String productName) {
        String mySQL = "DELETE FROM ITEMSINSTOCK WHERE ITEMNAME = ?";
        try {
            PreparedStatement statement = conn.prepareStatement(mySQL); 
            
            statement.setString(1, productName);
            statement.executeUpdate();
            
            
        }catch (SQLException ex) {
            
        } 

     }
    private void DeleteBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DeleteBtnActionPerformed

     int selectedRow =jTable1.getSelectedRow();
                
                if (selectedRow == -1) {
                    JOptionPane.showMessageDialog(null, "Please select a product to delete.");
                    return;
                }
                
                String productName = (String) jTable1.getValueAt(selectedRow, 1);
                boolean hasOrder = checkIfThereIsOrder(productName);
                
                if (hasOrder) {
                    JOptionPane.showMessageDialog(null, "Cannot delete the product. There is an existing order for it.");
                } else {
                    int confirmation = JOptionPane.showConfirmDialog(null, "Are you sure you want to delete the product?", "Confirmation", JOptionPane.YES_NO_OPTION);
                    
                    if (confirmation == JOptionPane.YES_OPTION) {
                        deleteProductFromStock(productName);
                        myTable.removeRow(selectedRow);
                        
                        }
                            }
                


        // TODO add your handling code here:
    }//GEN-LAST:event_DeleteBtnActionPerformed

    private void ProductsInSstmActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ProductsInSstmActionPerformed

 
    }//GEN-LAST:event_ProductsInSstmActionPerformed
   
  

    public boolean checker () {
        boolean checkPassed =true;
   
int Quantityl = 0;
String location = "";
        
        try {
        
            Quantityl= Integer.parseInt(QuantityFLD.getText());
            location = LocationFLD.getText();
            
            
        }catch (NumberFormatException e) {
         JOptionPane.showMessageDialog(this, "Please fill all fileds !");
        checkPassed=false;
        
        
        } 
              
        
        
        
        
       
    
    if (Quantityl==0 && location.equals("") ) {
    QuantityError.setVisible(true);
    LocationError.setVisible(true);
    
   
    
    } else if(Quantityl==0) { 
        
     QuantityError.setVisible(true);
       
     
    
    } else if (location.equals("")) {
    
    LocationError.setVisible(true);
    } 
    return checkPassed;
    }

    

    
    public boolean WilladdStock(String productName, int quantityBrought) {
        boolean willitadd = false;
        if (productName.isEmpty() || quantityBrought == 0) {
            System.out.println("Product name or quantity cannot be empty.");
            
        }

        try {
            // Check if the stock exists
            boolean stockExists = checkStockExists(productName);

            if (stockExists) {
                willitadd= true;
                // Retrieve the current quantity from the database
                int currentQuantity = getCurrentQuantity(productName);

                // Update the quantity in the database
                int updatedQuantity = currentQuantity + quantityBrought;
                updateStockQuantity(productName, updatedQuantity);
                LocationError.setVisible(false);
            }
           

            // Update the JTable with new or updated stock information
            updateJTable();
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return  willitadd;
    }

    private boolean checkStockExists(String productName) throws SQLException {
        String query = "SELECT * FROM ITEMSINSTOCK WHERE ITEMNAME = ?";
        try (PreparedStatement statement = conn.prepareStatement(query)) {
            statement.setString(1, productName);
            try (ResultSet resultSet = statement.executeQuery()) {
                return resultSet.next();
            }
            
        }
    }

    private int getCurrentQuantity(String productName) throws SQLException {
        String query = "SELECT QUANTITYAVALIABLE FROM ITEMSINSTOCK WHERE ITEMNAME = ?";
        try (PreparedStatement statement = conn.prepareStatement(query)) {
            statement.setString(1, productName);
            try (ResultSet resultSet = statement.executeQuery()) {
                if (resultSet.next()) {
                    return resultSet.getInt("QUANTITYAVALIABLE");
                }
            }
        }
        return 0;
    }

    private void updateStockQuantity(String productName, int quantity) throws SQLException {
        String query = "UPDATE ITEMSINSTOCK SET QUANTITYAVALIABLE =? WHERE ITEMNAME = ?";
        try (PreparedStatement statement = conn.prepareStatement(query)) {
            statement.setInt(1, quantity);
            statement.setString(2, productName);
            statement.executeUpdate();
        }
    }

    private void insertStock(String productName, int quantity) throws SQLException {
        String query = "INSERT INTO ITEMSINSTOCK (ITEMNAME, QUANTITYAVALIBLE) VALUES (?, ?)";
        try (PreparedStatement statement = conn.prepareStatement(query)) {
            statement.setString(1, productName);
            statement.setInt(2, quantity);
            statement.executeUpdate();
        }
    }

    private void updateJTable() throws SQLException {
      
           myTable.setRowCount(0);

            // Populate the JTable with data from the database
          // Add more columns as needed
        try {
            String query = "SELECT itemcode, itemname, buyingprice, sellingprice,supplier,category, location, QUANTITYAVALIABLE  FROM ITEMSINSTOCK";
            PreparedStatement statement = conn.prepareStatement(query);
            ResultSet resultSet = statement.executeQuery();

            while (resultSet.next()) {
                String barcode = resultSet.getString("itemcode");
                String property1 = resultSet.getString("itemname");
                int property2 = resultSet.getInt("buyingprice");
                int property3 = resultSet.getInt("sellingprice");

                String Thesupplier = resultSet.getString("supplier");
                String category = resultSet.getString("category");
                String location = resultSet.getString("location");
                int quantity = resultSet.getInt("QUANTITYAVALIABLE");
                myTable.addRow(new Object[]{barcode, property1, Thesupplier, category, property2, property3, location, quantity});
            }

            System.out.println("Table populated successfully.");
        } catch (SQLException ex) {
            System.out.println("Error populating table: " + ex.getMessage());
        }
        }
   
    
    
    
    
    
    private void AddTOSTOCKActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AddTOSTOCKActionPerformed

        int conyf = JOptionPane.showConfirmDialog(this, "Are  you sure you want to add this product to your stock? ", "Stock Manager", JOptionPane.YES_NO_OPTION);
        if (conyf == JOptionPane.YES_NO_OPTION) {
          
            

            // String barcode = barcodeText.getText();
          
            String ItemName = ProductsInSstm.getSelectedItem().toString();
            
            int priceOfBuying = Integer.parseInt(BuyingPricePopulate.getText());
            int priceOfSelling = Integer.parseInt(sellingpricePopulate.getText());
            String Supplier = SupplierPopulate.getText();
            String Category = CategoryPopulate.getText();
          
            boolean checkIfEmpty =checker();
            if (checkIfEmpty) {
         
           
           int quantity = Integer.parseInt(QuantityFLD.getText());
            String location = LocationFLD.getText();
            
            
          
            
            
            int itemcode = Integer.parseInt(ItemCodes.getText());

            
                if (WilladdStock(ItemName, quantity)==false) {
                    
            
            try {

                String insertQuery = "INSERT INTO ITEMSINSTOCK (itemcode, itemname, buyingprice, sellingprice,  quantityavaliable, category, location, supplier) VALUES (?,?, ?, ?,?,?,?,?)";
                PreparedStatement insertStatement = conn.prepareStatement(insertQuery);
                insertStatement.setInt(1, itemcode);
                insertStatement.setString(2, ItemName);
                insertStatement.setInt(3, priceOfBuying);
                insertStatement.setInt(4, priceOfSelling);
                insertStatement.setInt(5, quantity);
                insertStatement.setString(6, Category);
                insertStatement.setString(7, location);
                insertStatement.setString(8, Supplier);
                insertStatement.executeUpdate();

                myTable.addRow(new Object[]{itemcode, ItemName, Supplier, Category, priceOfBuying, priceOfSelling, location, quantity});
                JOptionPane.showMessageDialog(this, "Stock has been added successfully");

                System.out.println("Properties added to the database and itemsinstock table successfully.");
            } catch (SQLException ex) {
                System.out.println("Error adding properties to the database: " + ex.getMessage());
            }

            }
            }
        }
        // TODO add your handling code here:
    }//GEN-LAST:event_AddTOSTOCKActionPerformed

    
    private void ProductsInSstmItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_ProductsInSstmItemStateChanged

        String selectedProduct = (String) ProductsInSstm.getSelectedItem();
        String query = "SELECT itemcode, itemname, buyingprice,sellingprice,supplier, category FROM ITEMSINSYSTEM WHERE itemname = ?";
        try {

            PreparedStatement statement = conn.prepareStatement(query);
            statement.setString(1, selectedProduct);

            ResultSet resultSet = statement.executeQuery();

            if (resultSet.next()) {
                int itemcod = resultSet.getInt("itemcode");
                String productname = resultSet.getString("itemname");
                int buyingprice = resultSet.getInt("buyingprice");
                String supplier = resultSet.getString("SUPPLIER");
                String category = resultSet.getString("category");
                int sellingPrice = resultSet.getInt("sellingprice");
                int code = resultSet.getInt("ITEMCODE");
                BuyingPricePopulate.setText(Integer.toString(buyingprice));
                CategoryPopulate.setText(category);
                SupplierPopulate.setText(supplier);
                sellingpricePopulate.setText(Integer.toString(sellingPrice));
                ItemCodes.setText(Integer.toString(code));

            }

        } catch (SQLException ex) {
            System.out.println("Error updating labels: " + ex.getMessage());
        }

        // TODO add your handling code here:
    }//GEN-LAST:event_ProductsInSstmItemStateChanged

    private void GoToItemsBtnMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_GoToItemsBtnMouseClicked
        dispose();
        Items i = new Items();
        i.setVisible(true);

        // TODO add your handling code here:
    }//GEN-LAST:event_GoToItemsBtnMouseClicked

    private void GoToItemsBtnMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_GoToItemsBtnMouseEntered

        GoToItemsBtn.setForeground(new Color(121,158,81));
        // TODO add your handling code here:
    }//GEN-LAST:event_GoToItemsBtnMouseEntered

    private void GoToItemsBtnMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_GoToItemsBtnMouseExited

        GoToItemsBtn.setForeground(Color.WHITE);

        // TODO add your handling code here:
    }//GEN-LAST:event_GoToItemsBtnMouseExited

    private void GoToRequestMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_GoToRequestMouseClicked

        
   Requester r = new Requester();
   r.setVisible(true);
       
      
        // TODO add your handling code here:
    }//GEN-LAST:event_GoToRequestMouseClicked

    private void GoToRequestMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_GoToRequestMouseEntered

        GoToRequest.setForeground(new Color(121,158,81));

        // TODO add your handling code here:
    }//GEN-LAST:event_GoToRequestMouseEntered

    private void GoToRequestMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_GoToRequestMouseExited
        GoToRequest.setForeground(Color.WHITE);
    }//GEN-LAST:event_GoToRequestMouseExited

    private void GoToNewOrderMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_GoToNewOrderMouseClicked

        
        Order o = new Order();
     
        o.setVisible(true);

        // TODO add your handling code here:
    }//GEN-LAST:event_GoToNewOrderMouseClicked

    private void GoToNewOrderMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_GoToNewOrderMouseEntered
        GoToNewOrder.setForeground(new Color(121,158,81));

        // TODO add your handling code here:
    }//GEN-LAST:event_GoToNewOrderMouseEntered

    private void GoToNewOrderMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_GoToNewOrderMouseExited
        GoToNewOrder.setForeground(Color.WHITE);
    }//GEN-LAST:event_GoToNewOrderMouseExited

    private void jLabel16MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel16MouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_jLabel16MouseClicked

    private void jLabel16MouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel16MouseEntered
        // TODO add your handling code here:
    }//GEN-LAST:event_jLabel16MouseEntered

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Store.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Store.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Store.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Store.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {

                new Store().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton AddTOSTOCK;
    private javax.swing.JLabel BuyingPricePopulate;
    private javax.swing.JLabel CategoryPopulate;
    private javax.swing.JButton DeleteBtn;
    private javax.swing.JLabel GoToItemsBtn;
    private javax.swing.JLabel GoToNewOrder;
    private javax.swing.JLabel GoToRequest;
    private javax.swing.JLabel ItemCodes;
    private javax.swing.JLabel LocationError;
    private javax.swing.JTextField LocationFLD;
    private javax.swing.JComboBox<String> ProductsInSstm;
    private javax.swing.JLabel QuantityError;
    private javax.swing.JTextField QuantityFLD;
    private javax.swing.JLabel SupplierPopulate;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel25;
    private javax.swing.JLabel jLabel29;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JLabel sellingpricePopulate;
    // End of variables declaration//GEN-END:variables
}
